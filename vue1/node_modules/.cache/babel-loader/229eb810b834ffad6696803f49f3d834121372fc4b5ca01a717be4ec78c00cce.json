{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Users Table\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Email\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Username\")])], -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"recipient\"\n}, \"Recipient Email:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_hoisted_1, _createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.users, user => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: user.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(user.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.email), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.username), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"recipient\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.recipientEmail = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.recipientEmail]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.sendEmail && $options.sendEmail(...args))\n  }, \"Send Email\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","for","_hoisted_1","_hoisted_2","_createElementBlock","_Fragment","_renderList","$data","users","user","key","id","_toDisplayString","name","email","username","_hoisted_3","type","recipientEmail","$event","required","onClick","_cache","args","$options","sendEmail"],"sources":["C:\\xampp\\htdocs\\project-soa\\vue1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Users Table</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Email</th>\n          <th>Username</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"user in users\" :key=\"user.id\">\n          <td>{{ user.id }}</td>\n          <td>{{ user.name }}</td>\n          <td>{{ user.email }}</td>\n          <td>{{ user.username }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div>\n    <label for=\"recipient\">Recipient Email:</label>\n    <input type=\"email\" id=\"recipient\" v-model=\"recipientEmail\" required>\n    <button @click=\"sendEmail\">Send Email</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      users: [],\n      recipientEmail: ''\n    };\n  },\n  mounted() {\n    axios.get('http://localhost/project-soa/php1/index.php')\n      .then(response => {\n        this.users = response.data;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  },\n  methods: {\n    sendEmail() {\n      const apiKey = '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';\n      const fromEmail = 'comanpatricia27@gmail.com';\n      const fromName = 'Coman Patricia';\n      const subject = 'Test Email from SendGrid';\n      const content = 'This is a test email sent from SendGrid';\n      const recipient = this.recipientEmail;\n\n      // Send the email using SendGrid API\n      axios.post('https://api.sendgrid.com/v3/mail/send', {\n        personalizations: [{ to: [{ email: recipient }] }],\n        from: { email: fromEmail, name: fromName },\n        subject: subject,\n        content: [{ type: 'text/plain', value: content }],\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + apiKey,\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(response => {\n        console.log(response);\n        alert('Email sent successfully!');\n      })\n      .catch(error => {\n        console.error(error);\n        alert('Failed to send email!');\n      });\n    }\n  }\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAoB,YAAhB,aAAW;gCAEbA,mBAAA,CAOQ,gB,aANNA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAiB,YAAb,UAAQ,E;gCAelBA,mBAAA,CAA+C;EAAxCC,GAAG,EAAC;AAAW,GAAC,kBAAgB;;;6DAvBzCD,mBAAA,CAoBM,cAnBJE,UAAoB,EACpBF,mBAAA,CAiBQ,gBAhBNG,UAOQ,EACRH,mBAAA,CAOQ,iB,kBANNI,mBAAA,CAKKC,SAAA,QAAAC,WAAA,CALcC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfL,mBAAA,CAKK;MALsBM,GAAG,EAAED,IAAI,CAACE;QACnCX,mBAAA,CAAsB,YAAAY,gBAAA,CAAfH,IAAI,CAACE,EAAE,kBACdX,mBAAA,CAAwB,YAAAY,gBAAA,CAAjBH,IAAI,CAACI,IAAI,kBAChBb,mBAAA,CAAyB,YAAAY,gBAAA,CAAlBH,IAAI,CAACK,KAAK,kBACjBd,mBAAA,CAA4B,YAAAY,gBAAA,CAArBH,IAAI,CAACM,QAAQ,iB;wCAM5Bf,mBAAA,CAIM,cAHJgB,UAA+C,E,gBAC/ChB,mBAAA,CAAqE;IAA9DiB,IAAI,EAAC,OAAO;IAACN,EAAE,EAAC,WAAW;+DAAUJ,KAAA,CAAAW,cAAc,GAAAC,MAAA;IAAEC,QAAQ,EAAR;iDAAhBb,KAAA,CAAAW,cAAc,E,GAC1DlB,mBAAA,CAA8C;IAArCqB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,YAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}